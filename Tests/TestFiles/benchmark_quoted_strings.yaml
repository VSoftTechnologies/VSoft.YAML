# Benchmark file for quoted string performance testing
# Tests single-quoted and double-quoted strings with escape sequences

strings:
  - id: 0
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 0"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 1
    type: 'single_quoted'
    simple: 'Simple single-quoted string 1'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 2
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 3
    type: "mixed"
    strings:
      double: "Double quoted 3"
      single: 'Single quoted 3'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 4
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 4"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 5
    type: 'single_quoted'
    simple: 'Simple single-quoted string 5'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 6
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 7
    type: "mixed"
    strings:
      double: "Double quoted 7"
      single: 'Single quoted 7'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 8
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 8"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 9
    type: 'single_quoted'
    simple: 'Simple single-quoted string 9'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 10
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 11
    type: "mixed"
    strings:
      double: "Double quoted 11"
      single: 'Single quoted 11'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 12
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 12"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 13
    type: 'single_quoted'
    simple: 'Simple single-quoted string 13'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 14
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 15
    type: "mixed"
    strings:
      double: "Double quoted 15"
      single: 'Single quoted 15'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 16
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 16"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 17
    type: 'single_quoted'
    simple: 'Simple single-quoted string 17'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 18
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 19
    type: "mixed"
    strings:
      double: "Double quoted 19"
      single: 'Single quoted 19'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 20
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 20"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 21
    type: 'single_quoted'
    simple: 'Simple single-quoted string 21'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 22
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 23
    type: "mixed"
    strings:
      double: "Double quoted 23"
      single: 'Single quoted 23'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 24
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 24"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 25
    type: 'single_quoted'
    simple: 'Simple single-quoted string 25'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 26
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 27
    type: "mixed"
    strings:
      double: "Double quoted 27"
      single: 'Single quoted 27'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 28
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 28"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 29
    type: 'single_quoted'
    simple: 'Simple single-quoted string 29'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 30
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 31
    type: "mixed"
    strings:
      double: "Double quoted 31"
      single: 'Single quoted 31'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 32
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 32"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 33
    type: 'single_quoted'
    simple: 'Simple single-quoted string 33'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 34
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 35
    type: "mixed"
    strings:
      double: "Double quoted 35"
      single: 'Single quoted 35'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 36
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 36"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 37
    type: 'single_quoted'
    simple: 'Simple single-quoted string 37'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 38
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 39
    type: "mixed"
    strings:
      double: "Double quoted 39"
      single: 'Single quoted 39'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 40
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 40"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 41
    type: 'single_quoted'
    simple: 'Simple single-quoted string 41'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 42
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 43
    type: "mixed"
    strings:
      double: "Double quoted 43"
      single: 'Single quoted 43'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 44
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 44"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 45
    type: 'single_quoted'
    simple: 'Simple single-quoted string 45'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 46
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 47
    type: "mixed"
    strings:
      double: "Double quoted 47"
      single: 'Single quoted 47'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 48
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 48"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 49
    type: 'single_quoted'
    simple: 'Simple single-quoted string 49'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 50
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 51
    type: "mixed"
    strings:
      double: "Double quoted 51"
      single: 'Single quoted 51'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 52
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 52"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 53
    type: 'single_quoted'
    simple: 'Simple single-quoted string 53'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 54
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 55
    type: "mixed"
    strings:
      double: "Double quoted 55"
      single: 'Single quoted 55'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 56
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 56"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 57
    type: 'single_quoted'
    simple: 'Simple single-quoted string 57'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 58
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 59
    type: "mixed"
    strings:
      double: "Double quoted 59"
      single: 'Single quoted 59'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 60
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 60"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 61
    type: 'single_quoted'
    simple: 'Simple single-quoted string 61'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 62
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 63
    type: "mixed"
    strings:
      double: "Double quoted 63"
      single: 'Single quoted 63'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 64
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 64"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 65
    type: 'single_quoted'
    simple: 'Simple single-quoted string 65'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 66
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 67
    type: "mixed"
    strings:
      double: "Double quoted 67"
      single: 'Single quoted 67'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 68
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 68"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 69
    type: 'single_quoted'
    simple: 'Simple single-quoted string 69'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 70
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 71
    type: "mixed"
    strings:
      double: "Double quoted 71"
      single: 'Single quoted 71'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 72
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 72"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 73
    type: 'single_quoted'
    simple: 'Simple single-quoted string 73'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 74
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 75
    type: "mixed"
    strings:
      double: "Double quoted 75"
      single: 'Single quoted 75'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 76
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 76"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 77
    type: 'single_quoted'
    simple: 'Simple single-quoted string 77'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 78
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 79
    type: "mixed"
    strings:
      double: "Double quoted 79"
      single: 'Single quoted 79'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 80
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 80"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 81
    type: 'single_quoted'
    simple: 'Simple single-quoted string 81'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 82
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 83
    type: "mixed"
    strings:
      double: "Double quoted 83"
      single: 'Single quoted 83'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 84
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 84"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 85
    type: 'single_quoted'
    simple: 'Simple single-quoted string 85'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 86
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 87
    type: "mixed"
    strings:
      double: "Double quoted 87"
      single: 'Single quoted 87'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 88
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 88"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 89
    type: 'single_quoted'
    simple: 'Simple single-quoted string 89'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 90
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 91
    type: "mixed"
    strings:
      double: "Double quoted 91"
      single: 'Single quoted 91'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 92
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 92"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 93
    type: 'single_quoted'
    simple: 'Simple single-quoted string 93'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 94
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 95
    type: "mixed"
    strings:
      double: "Double quoted 95"
      single: 'Single quoted 95'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 96
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 96"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 97
    type: 'single_quoted'
    simple: 'Simple single-quoted string 97'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 98
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 99
    type: "mixed"
    strings:
      double: "Double quoted 99"
      single: 'Single quoted 99'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 100
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 100"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 101
    type: 'single_quoted'
    simple: 'Simple single-quoted string 101'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 102
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 103
    type: "mixed"
    strings:
      double: "Double quoted 103"
      single: 'Single quoted 103'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 104
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 104"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 105
    type: 'single_quoted'
    simple: 'Simple single-quoted string 105'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 106
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 107
    type: "mixed"
    strings:
      double: "Double quoted 107"
      single: 'Single quoted 107'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 108
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 108"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 109
    type: 'single_quoted'
    simple: 'Simple single-quoted string 109'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 110
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 111
    type: "mixed"
    strings:
      double: "Double quoted 111"
      single: 'Single quoted 111'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 112
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 112"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 113
    type: 'single_quoted'
    simple: 'Simple single-quoted string 113'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 114
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 115
    type: "mixed"
    strings:
      double: "Double quoted 115"
      single: 'Single quoted 115'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 116
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 116"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 117
    type: 'single_quoted'
    simple: 'Simple single-quoted string 117'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 118
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 119
    type: "mixed"
    strings:
      double: "Double quoted 119"
      single: 'Single quoted 119'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 120
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 120"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 121
    type: 'single_quoted'
    simple: 'Simple single-quoted string 121'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 122
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 123
    type: "mixed"
    strings:
      double: "Double quoted 123"
      single: 'Single quoted 123'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 124
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 124"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 125
    type: 'single_quoted'
    simple: 'Simple single-quoted string 125'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 126
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 127
    type: "mixed"
    strings:
      double: "Double quoted 127"
      single: 'Single quoted 127'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 128
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 128"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 129
    type: 'single_quoted'
    simple: 'Simple single-quoted string 129'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 130
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 131
    type: "mixed"
    strings:
      double: "Double quoted 131"
      single: 'Single quoted 131'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 132
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 132"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 133
    type: 'single_quoted'
    simple: 'Simple single-quoted string 133'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 134
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 135
    type: "mixed"
    strings:
      double: "Double quoted 135"
      single: 'Single quoted 135'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 136
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 136"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 137
    type: 'single_quoted'
    simple: 'Simple single-quoted string 137'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 138
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 139
    type: "mixed"
    strings:
      double: "Double quoted 139"
      single: 'Single quoted 139'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 140
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 140"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 141
    type: 'single_quoted'
    simple: 'Simple single-quoted string 141'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 142
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 143
    type: "mixed"
    strings:
      double: "Double quoted 143"
      single: 'Single quoted 143'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 144
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 144"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 145
    type: 'single_quoted'
    simple: 'Simple single-quoted string 145'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 146
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 147
    type: "mixed"
    strings:
      double: "Double quoted 147"
      single: 'Single quoted 147'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 148
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 148"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 149
    type: 'single_quoted'
    simple: 'Simple single-quoted string 149'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 150
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 151
    type: "mixed"
    strings:
      double: "Double quoted 151"
      single: 'Single quoted 151'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 152
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 152"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 153
    type: 'single_quoted'
    simple: 'Simple single-quoted string 153'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 154
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 155
    type: "mixed"
    strings:
      double: "Double quoted 155"
      single: 'Single quoted 155'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 156
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 156"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 157
    type: 'single_quoted'
    simple: 'Simple single-quoted string 157'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 158
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 159
    type: "mixed"
    strings:
      double: "Double quoted 159"
      single: 'Single quoted 159'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 160
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 160"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 161
    type: 'single_quoted'
    simple: 'Simple single-quoted string 161'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 162
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 163
    type: "mixed"
    strings:
      double: "Double quoted 163"
      single: 'Single quoted 163'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 164
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 164"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 165
    type: 'single_quoted'
    simple: 'Simple single-quoted string 165'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 166
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 167
    type: "mixed"
    strings:
      double: "Double quoted 167"
      single: 'Single quoted 167'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 168
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 168"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 169
    type: 'single_quoted'
    simple: 'Simple single-quoted string 169'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 170
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 171
    type: "mixed"
    strings:
      double: "Double quoted 171"
      single: 'Single quoted 171'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 172
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 172"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 173
    type: 'single_quoted'
    simple: 'Simple single-quoted string 173'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 174
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 175
    type: "mixed"
    strings:
      double: "Double quoted 175"
      single: 'Single quoted 175'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 176
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 176"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 177
    type: 'single_quoted'
    simple: 'Simple single-quoted string 177'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 178
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 179
    type: "mixed"
    strings:
      double: "Double quoted 179"
      single: 'Single quoted 179'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 180
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 180"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 181
    type: 'single_quoted'
    simple: 'Simple single-quoted string 181'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 182
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 183
    type: "mixed"
    strings:
      double: "Double quoted 183"
      single: 'Single quoted 183'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 184
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 184"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 185
    type: 'single_quoted'
    simple: 'Simple single-quoted string 185'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 186
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 187
    type: "mixed"
    strings:
      double: "Double quoted 187"
      single: 'Single quoted 187'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 188
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 188"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 189
    type: 'single_quoted'
    simple: 'Simple single-quoted string 189'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 190
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 191
    type: "mixed"
    strings:
      double: "Double quoted 191"
      single: 'Single quoted 191'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 192
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 192"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 193
    type: 'single_quoted'
    simple: 'Simple single-quoted string 193'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 194
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 195
    type: "mixed"
    strings:
      double: "Double quoted 195"
      single: 'Single quoted 195'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 196
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 196"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 197
    type: 'single_quoted'
    simple: 'Simple single-quoted string 197'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 198
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 199
    type: "mixed"
    strings:
      double: "Double quoted 199"
      single: 'Single quoted 199'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 200
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 200"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 201
    type: 'single_quoted'
    simple: 'Simple single-quoted string 201'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 202
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 203
    type: "mixed"
    strings:
      double: "Double quoted 203"
      single: 'Single quoted 203'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 204
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 204"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 205
    type: 'single_quoted'
    simple: 'Simple single-quoted string 205'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 206
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 207
    type: "mixed"
    strings:
      double: "Double quoted 207"
      single: 'Single quoted 207'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 208
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 208"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 209
    type: 'single_quoted'
    simple: 'Simple single-quoted string 209'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 210
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 211
    type: "mixed"
    strings:
      double: "Double quoted 211"
      single: 'Single quoted 211'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 212
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 212"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 213
    type: 'single_quoted'
    simple: 'Simple single-quoted string 213'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 214
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 215
    type: "mixed"
    strings:
      double: "Double quoted 215"
      single: 'Single quoted 215'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 216
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 216"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 217
    type: 'single_quoted'
    simple: 'Simple single-quoted string 217'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 218
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 219
    type: "mixed"
    strings:
      double: "Double quoted 219"
      single: 'Single quoted 219'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 220
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 220"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 221
    type: 'single_quoted'
    simple: 'Simple single-quoted string 221'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 222
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 223
    type: "mixed"
    strings:
      double: "Double quoted 223"
      single: 'Single quoted 223'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 224
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 224"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 225
    type: 'single_quoted'
    simple: 'Simple single-quoted string 225'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 226
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 227
    type: "mixed"
    strings:
      double: "Double quoted 227"
      single: 'Single quoted 227'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 228
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 228"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 229
    type: 'single_quoted'
    simple: 'Simple single-quoted string 229'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 230
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 231
    type: "mixed"
    strings:
      double: "Double quoted 231"
      single: 'Single quoted 231'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 232
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 232"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 233
    type: 'single_quoted'
    simple: 'Simple single-quoted string 233'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 234
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 235
    type: "mixed"
    strings:
      double: "Double quoted 235"
      single: 'Single quoted 235'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 236
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 236"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 237
    type: 'single_quoted'
    simple: 'Simple single-quoted string 237'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 238
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 239
    type: "mixed"
    strings:
      double: "Double quoted 239"
      single: 'Single quoted 239'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 240
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 240"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 241
    type: 'single_quoted'
    simple: 'Simple single-quoted string 241'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 242
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 243
    type: "mixed"
    strings:
      double: "Double quoted 243"
      single: 'Single quoted 243'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 244
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 244"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 245
    type: 'single_quoted'
    simple: 'Simple single-quoted string 245'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 246
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 247
    type: "mixed"
    strings:
      double: "Double quoted 247"
      single: 'Single quoted 247'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 248
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 248"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 249
    type: 'single_quoted'
    simple: 'Simple single-quoted string 249'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 250
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 251
    type: "mixed"
    strings:
      double: "Double quoted 251"
      single: 'Single quoted 251'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 252
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 252"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 253
    type: 'single_quoted'
    simple: 'Simple single-quoted string 253'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 254
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 255
    type: "mixed"
    strings:
      double: "Double quoted 255"
      single: 'Single quoted 255'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 256
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 256"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 257
    type: 'single_quoted'
    simple: 'Simple single-quoted string 257'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 258
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 259
    type: "mixed"
    strings:
      double: "Double quoted 259"
      single: 'Single quoted 259'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 260
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 260"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 261
    type: 'single_quoted'
    simple: 'Simple single-quoted string 261'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 262
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 263
    type: "mixed"
    strings:
      double: "Double quoted 263"
      single: 'Single quoted 263'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 264
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 264"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 265
    type: 'single_quoted'
    simple: 'Simple single-quoted string 265'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 266
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 267
    type: "mixed"
    strings:
      double: "Double quoted 267"
      single: 'Single quoted 267'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 268
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 268"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 269
    type: 'single_quoted'
    simple: 'Simple single-quoted string 269'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 270
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 271
    type: "mixed"
    strings:
      double: "Double quoted 271"
      single: 'Single quoted 271'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 272
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 272"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 273
    type: 'single_quoted'
    simple: 'Simple single-quoted string 273'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 274
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 275
    type: "mixed"
    strings:
      double: "Double quoted 275"
      single: 'Single quoted 275'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 276
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 276"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 277
    type: 'single_quoted'
    simple: 'Simple single-quoted string 277'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 278
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 279
    type: "mixed"
    strings:
      double: "Double quoted 279"
      single: 'Single quoted 279'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 280
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 280"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 281
    type: 'single_quoted'
    simple: 'Simple single-quoted string 281'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 282
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 283
    type: "mixed"
    strings:
      double: "Double quoted 283"
      single: 'Single quoted 283'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 284
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 284"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 285
    type: 'single_quoted'
    simple: 'Simple single-quoted string 285'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 286
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 287
    type: "mixed"
    strings:
      double: "Double quoted 287"
      single: 'Single quoted 287'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 288
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 288"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 289
    type: 'single_quoted'
    simple: 'Simple single-quoted string 289'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 290
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 291
    type: "mixed"
    strings:
      double: "Double quoted 291"
      single: 'Single quoted 291'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 292
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 292"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 293
    type: 'single_quoted'
    simple: 'Simple single-quoted string 293'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 294
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 295
    type: "mixed"
    strings:
      double: "Double quoted 295"
      single: 'Single quoted 295'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 296
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 296"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 297
    type: 'single_quoted'
    simple: 'Simple single-quoted string 297'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 298
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 299
    type: "mixed"
    strings:
      double: "Double quoted 299"
      single: 'Single quoted 299'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 300
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 300"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 301
    type: 'single_quoted'
    simple: 'Simple single-quoted string 301'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 302
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 303
    type: "mixed"
    strings:
      double: "Double quoted 303"
      single: 'Single quoted 303'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 304
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 304"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 305
    type: 'single_quoted'
    simple: 'Simple single-quoted string 305'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 306
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 307
    type: "mixed"
    strings:
      double: "Double quoted 307"
      single: 'Single quoted 307'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 308
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 308"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 309
    type: 'single_quoted'
    simple: 'Simple single-quoted string 309'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 310
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 311
    type: "mixed"
    strings:
      double: "Double quoted 311"
      single: 'Single quoted 311'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 312
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 312"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 313
    type: 'single_quoted'
    simple: 'Simple single-quoted string 313'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 314
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 315
    type: "mixed"
    strings:
      double: "Double quoted 315"
      single: 'Single quoted 315'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 316
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 316"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 317
    type: 'single_quoted'
    simple: 'Simple single-quoted string 317'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 318
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 319
    type: "mixed"
    strings:
      double: "Double quoted 319"
      single: 'Single quoted 319'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 320
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 320"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 321
    type: 'single_quoted'
    simple: 'Simple single-quoted string 321'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 322
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 323
    type: "mixed"
    strings:
      double: "Double quoted 323"
      single: 'Single quoted 323'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 324
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 324"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 325
    type: 'single_quoted'
    simple: 'Simple single-quoted string 325'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 326
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 327
    type: "mixed"
    strings:
      double: "Double quoted 327"
      single: 'Single quoted 327'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 328
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 328"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 329
    type: 'single_quoted'
    simple: 'Simple single-quoted string 329'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 330
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 331
    type: "mixed"
    strings:
      double: "Double quoted 331"
      single: 'Single quoted 331'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 332
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 332"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 333
    type: 'single_quoted'
    simple: 'Simple single-quoted string 333'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 334
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 335
    type: "mixed"
    strings:
      double: "Double quoted 335"
      single: 'Single quoted 335'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 336
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 336"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 337
    type: 'single_quoted'
    simple: 'Simple single-quoted string 337'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 338
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 339
    type: "mixed"
    strings:
      double: "Double quoted 339"
      single: 'Single quoted 339'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 340
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 340"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 341
    type: 'single_quoted'
    simple: 'Simple single-quoted string 341'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 342
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 343
    type: "mixed"
    strings:
      double: "Double quoted 343"
      single: 'Single quoted 343'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 344
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 344"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 345
    type: 'single_quoted'
    simple: 'Simple single-quoted string 345'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 346
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 347
    type: "mixed"
    strings:
      double: "Double quoted 347"
      single: 'Single quoted 347'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 348
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 348"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 349
    type: 'single_quoted'
    simple: 'Simple single-quoted string 349'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 350
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 351
    type: "mixed"
    strings:
      double: "Double quoted 351"
      single: 'Single quoted 351'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 352
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 352"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 353
    type: 'single_quoted'
    simple: 'Simple single-quoted string 353'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 354
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 355
    type: "mixed"
    strings:
      double: "Double quoted 355"
      single: 'Single quoted 355'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 356
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 356"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 357
    type: 'single_quoted'
    simple: 'Simple single-quoted string 357'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 358
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 359
    type: "mixed"
    strings:
      double: "Double quoted 359"
      single: 'Single quoted 359'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 360
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 360"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 361
    type: 'single_quoted'
    simple: 'Simple single-quoted string 361'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 362
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 363
    type: "mixed"
    strings:
      double: "Double quoted 363"
      single: 'Single quoted 363'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 364
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 364"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 365
    type: 'single_quoted'
    simple: 'Simple single-quoted string 365'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 366
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 367
    type: "mixed"
    strings:
      double: "Double quoted 367"
      single: 'Single quoted 367'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 368
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 368"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 369
    type: 'single_quoted'
    simple: 'Simple single-quoted string 369'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 370
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 371
    type: "mixed"
    strings:
      double: "Double quoted 371"
      single: 'Single quoted 371'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 372
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 372"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 373
    type: 'single_quoted'
    simple: 'Simple single-quoted string 373'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 374
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 375
    type: "mixed"
    strings:
      double: "Double quoted 375"
      single: 'Single quoted 375'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 376
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 376"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 377
    type: 'single_quoted'
    simple: 'Simple single-quoted string 377'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 378
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 379
    type: "mixed"
    strings:
      double: "Double quoted 379"
      single: 'Single quoted 379'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 380
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 380"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 381
    type: 'single_quoted'
    simple: 'Simple single-quoted string 381'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 382
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 383
    type: "mixed"
    strings:
      double: "Double quoted 383"
      single: 'Single quoted 383'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 384
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 384"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 385
    type: 'single_quoted'
    simple: 'Simple single-quoted string 385'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 386
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 387
    type: "mixed"
    strings:
      double: "Double quoted 387"
      single: 'Single quoted 387'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 388
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 388"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 389
    type: 'single_quoted'
    simple: 'Simple single-quoted string 389'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 390
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 391
    type: "mixed"
    strings:
      double: "Double quoted 391"
      single: 'Single quoted 391'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 392
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 392"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 393
    type: 'single_quoted'
    simple: 'Simple single-quoted string 393'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 394
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 395
    type: "mixed"
    strings:
      double: "Double quoted 395"
      single: 'Single quoted 395'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 396
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 396"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 397
    type: 'single_quoted'
    simple: 'Simple single-quoted string 397'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 398
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 399
    type: "mixed"
    strings:
      double: "Double quoted 399"
      single: 'Single quoted 399'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 400
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 400"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 401
    type: 'single_quoted'
    simple: 'Simple single-quoted string 401'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 402
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 403
    type: "mixed"
    strings:
      double: "Double quoted 403"
      single: 'Single quoted 403'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 404
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 404"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 405
    type: 'single_quoted'
    simple: 'Simple single-quoted string 405'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 406
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 407
    type: "mixed"
    strings:
      double: "Double quoted 407"
      single: 'Single quoted 407'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 408
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 408"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 409
    type: 'single_quoted'
    simple: 'Simple single-quoted string 409'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 410
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 411
    type: "mixed"
    strings:
      double: "Double quoted 411"
      single: 'Single quoted 411'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 412
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 412"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 413
    type: 'single_quoted'
    simple: 'Simple single-quoted string 413'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 414
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 415
    type: "mixed"
    strings:
      double: "Double quoted 415"
      single: 'Single quoted 415'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 416
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 416"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 417
    type: 'single_quoted'
    simple: 'Simple single-quoted string 417'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 418
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 419
    type: "mixed"
    strings:
      double: "Double quoted 419"
      single: 'Single quoted 419'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 420
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 420"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 421
    type: 'single_quoted'
    simple: 'Simple single-quoted string 421'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 422
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 423
    type: "mixed"
    strings:
      double: "Double quoted 423"
      single: 'Single quoted 423'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 424
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 424"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 425
    type: 'single_quoted'
    simple: 'Simple single-quoted string 425'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 426
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 427
    type: "mixed"
    strings:
      double: "Double quoted 427"
      single: 'Single quoted 427'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 428
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 428"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 429
    type: 'single_quoted'
    simple: 'Simple single-quoted string 429'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 430
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 431
    type: "mixed"
    strings:
      double: "Double quoted 431"
      single: 'Single quoted 431'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 432
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 432"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 433
    type: 'single_quoted'
    simple: 'Simple single-quoted string 433'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 434
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 435
    type: "mixed"
    strings:
      double: "Double quoted 435"
      single: 'Single quoted 435'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 436
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 436"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 437
    type: 'single_quoted'
    simple: 'Simple single-quoted string 437'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 438
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 439
    type: "mixed"
    strings:
      double: "Double quoted 439"
      single: 'Single quoted 439'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 440
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 440"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 441
    type: 'single_quoted'
    simple: 'Simple single-quoted string 441'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 442
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 443
    type: "mixed"
    strings:
      double: "Double quoted 443"
      single: 'Single quoted 443'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 444
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 444"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 445
    type: 'single_quoted'
    simple: 'Simple single-quoted string 445'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 446
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 447
    type: "mixed"
    strings:
      double: "Double quoted 447"
      single: 'Single quoted 447'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 448
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 448"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 449
    type: 'single_quoted'
    simple: 'Simple single-quoted string 449'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 450
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 451
    type: "mixed"
    strings:
      double: "Double quoted 451"
      single: 'Single quoted 451'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 452
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 452"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 453
    type: 'single_quoted'
    simple: 'Simple single-quoted string 453'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 454
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 455
    type: "mixed"
    strings:
      double: "Double quoted 455"
      single: 'Single quoted 455'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 456
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 456"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 457
    type: 'single_quoted'
    simple: 'Simple single-quoted string 457'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 458
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 459
    type: "mixed"
    strings:
      double: "Double quoted 459"
      single: 'Single quoted 459'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 460
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 460"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 461
    type: 'single_quoted'
    simple: 'Simple single-quoted string 461'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 462
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 463
    type: "mixed"
    strings:
      double: "Double quoted 463"
      single: 'Single quoted 463'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 464
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 464"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 465
    type: 'single_quoted'
    simple: 'Simple single-quoted string 465'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 466
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 467
    type: "mixed"
    strings:
      double: "Double quoted 467"
      single: 'Single quoted 467'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 468
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 468"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 469
    type: 'single_quoted'
    simple: 'Simple single-quoted string 469'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 470
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 471
    type: "mixed"
    strings:
      double: "Double quoted 471"
      single: 'Single quoted 471'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 472
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 472"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 473
    type: 'single_quoted'
    simple: 'Simple single-quoted string 473'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 474
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 475
    type: "mixed"
    strings:
      double: "Double quoted 475"
      single: 'Single quoted 475'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 476
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 476"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 477
    type: 'single_quoted'
    simple: 'Simple single-quoted string 477'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 478
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 479
    type: "mixed"
    strings:
      double: "Double quoted 479"
      single: 'Single quoted 479'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 480
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 480"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 481
    type: 'single_quoted'
    simple: 'Simple single-quoted string 481'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 482
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 483
    type: "mixed"
    strings:
      double: "Double quoted 483"
      single: 'Single quoted 483'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 484
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 484"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 485
    type: 'single_quoted'
    simple: 'Simple single-quoted string 485'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 486
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 487
    type: "mixed"
    strings:
      double: "Double quoted 487"
      single: 'Single quoted 487'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 488
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 488"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 489
    type: 'single_quoted'
    simple: 'Simple single-quoted string 489'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 490
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 491
    type: "mixed"
    strings:
      double: "Double quoted 491"
      single: 'Single quoted 491'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 492
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 492"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 493
    type: 'single_quoted'
    simple: 'Simple single-quoted string 493'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 494
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 495
    type: "mixed"
    strings:
      double: "Double quoted 495"
      single: 'Single quoted 495'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 496
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 496"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 497
    type: 'single_quoted'
    simple: 'Simple single-quoted string 497'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 498
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 499
    type: "mixed"
    strings:
      double: "Double quoted 499"
      single: 'Single quoted 499'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 500
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 500"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 501
    type: 'single_quoted'
    simple: 'Simple single-quoted string 501'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 502
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 503
    type: "mixed"
    strings:
      double: "Double quoted 503"
      single: 'Single quoted 503'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 504
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 504"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 505
    type: 'single_quoted'
    simple: 'Simple single-quoted string 505'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 506
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 507
    type: "mixed"
    strings:
      double: "Double quoted 507"
      single: 'Single quoted 507'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 508
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 508"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 509
    type: 'single_quoted'
    simple: 'Simple single-quoted string 509'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 510
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 511
    type: "mixed"
    strings:
      double: "Double quoted 511"
      single: 'Single quoted 511'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 512
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 512"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 513
    type: 'single_quoted'
    simple: 'Simple single-quoted string 513'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 514
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 515
    type: "mixed"
    strings:
      double: "Double quoted 515"
      single: 'Single quoted 515'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 516
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 516"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 517
    type: 'single_quoted'
    simple: 'Simple single-quoted string 517'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 518
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 519
    type: "mixed"
    strings:
      double: "Double quoted 519"
      single: 'Single quoted 519'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 520
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 520"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 521
    type: 'single_quoted'
    simple: 'Simple single-quoted string 521'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 522
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 523
    type: "mixed"
    strings:
      double: "Double quoted 523"
      single: 'Single quoted 523'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 524
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 524"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 525
    type: 'single_quoted'
    simple: 'Simple single-quoted string 525'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 526
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 527
    type: "mixed"
    strings:
      double: "Double quoted 527"
      single: 'Single quoted 527'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 528
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 528"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 529
    type: 'single_quoted'
    simple: 'Simple single-quoted string 529'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 530
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 531
    type: "mixed"
    strings:
      double: "Double quoted 531"
      single: 'Single quoted 531'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 532
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 532"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 533
    type: 'single_quoted'
    simple: 'Simple single-quoted string 533'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 534
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 535
    type: "mixed"
    strings:
      double: "Double quoted 535"
      single: 'Single quoted 535'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 536
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 536"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 537
    type: 'single_quoted'
    simple: 'Simple single-quoted string 537'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 538
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 539
    type: "mixed"
    strings:
      double: "Double quoted 539"
      single: 'Single quoted 539'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 540
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 540"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 541
    type: 'single_quoted'
    simple: 'Simple single-quoted string 541'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 542
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 543
    type: "mixed"
    strings:
      double: "Double quoted 543"
      single: 'Single quoted 543'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 544
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 544"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 545
    type: 'single_quoted'
    simple: 'Simple single-quoted string 545'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 546
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 547
    type: "mixed"
    strings:
      double: "Double quoted 547"
      single: 'Single quoted 547'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 548
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 548"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 549
    type: 'single_quoted'
    simple: 'Simple single-quoted string 549'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 550
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 551
    type: "mixed"
    strings:
      double: "Double quoted 551"
      single: 'Single quoted 551'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 552
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 552"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 553
    type: 'single_quoted'
    simple: 'Simple single-quoted string 553'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 554
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 555
    type: "mixed"
    strings:
      double: "Double quoted 555"
      single: 'Single quoted 555'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 556
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 556"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 557
    type: 'single_quoted'
    simple: 'Simple single-quoted string 557'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 558
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 559
    type: "mixed"
    strings:
      double: "Double quoted 559"
      single: 'Single quoted 559'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 560
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 560"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 561
    type: 'single_quoted'
    simple: 'Simple single-quoted string 561'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 562
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 563
    type: "mixed"
    strings:
      double: "Double quoted 563"
      single: 'Single quoted 563'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 564
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 564"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 565
    type: 'single_quoted'
    simple: 'Simple single-quoted string 565'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 566
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 567
    type: "mixed"
    strings:
      double: "Double quoted 567"
      single: 'Single quoted 567'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 568
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 568"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 569
    type: 'single_quoted'
    simple: 'Simple single-quoted string 569'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 570
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 571
    type: "mixed"
    strings:
      double: "Double quoted 571"
      single: 'Single quoted 571'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 572
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 572"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 573
    type: 'single_quoted'
    simple: 'Simple single-quoted string 573'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 574
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 575
    type: "mixed"
    strings:
      double: "Double quoted 575"
      single: 'Single quoted 575'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 576
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 576"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 577
    type: 'single_quoted'
    simple: 'Simple single-quoted string 577'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 578
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 579
    type: "mixed"
    strings:
      double: "Double quoted 579"
      single: 'Single quoted 579'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 580
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 580"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 581
    type: 'single_quoted'
    simple: 'Simple single-quoted string 581'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 582
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 583
    type: "mixed"
    strings:
      double: "Double quoted 583"
      single: 'Single quoted 583'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 584
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 584"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 585
    type: 'single_quoted'
    simple: 'Simple single-quoted string 585'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 586
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 587
    type: "mixed"
    strings:
      double: "Double quoted 587"
      single: 'Single quoted 587'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 588
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 588"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 589
    type: 'single_quoted'
    simple: 'Simple single-quoted string 589'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 590
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 591
    type: "mixed"
    strings:
      double: "Double quoted 591"
      single: 'Single quoted 591'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 592
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 592"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 593
    type: 'single_quoted'
    simple: 'Simple single-quoted string 593'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 594
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 595
    type: "mixed"
    strings:
      double: "Double quoted 595"
      single: 'Single quoted 595'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 596
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 596"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 597
    type: 'single_quoted'
    simple: 'Simple single-quoted string 597'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 598
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 599
    type: "mixed"
    strings:
      double: "Double quoted 599"
      single: 'Single quoted 599'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 600
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 600"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 601
    type: 'single_quoted'
    simple: 'Simple single-quoted string 601'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 602
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 603
    type: "mixed"
    strings:
      double: "Double quoted 603"
      single: 'Single quoted 603'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 604
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 604"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 605
    type: 'single_quoted'
    simple: 'Simple single-quoted string 605'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 606
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 607
    type: "mixed"
    strings:
      double: "Double quoted 607"
      single: 'Single quoted 607'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 608
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 608"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 609
    type: 'single_quoted'
    simple: 'Simple single-quoted string 609'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 610
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 611
    type: "mixed"
    strings:
      double: "Double quoted 611"
      single: 'Single quoted 611'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 612
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 612"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 613
    type: 'single_quoted'
    simple: 'Simple single-quoted string 613'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 614
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 615
    type: "mixed"
    strings:
      double: "Double quoted 615"
      single: 'Single quoted 615'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 616
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 616"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 617
    type: 'single_quoted'
    simple: 'Simple single-quoted string 617'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 618
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 619
    type: "mixed"
    strings:
      double: "Double quoted 619"
      single: 'Single quoted 619'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 620
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 620"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 621
    type: 'single_quoted'
    simple: 'Simple single-quoted string 621'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 622
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 623
    type: "mixed"
    strings:
      double: "Double quoted 623"
      single: 'Single quoted 623'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 624
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 624"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 625
    type: 'single_quoted'
    simple: 'Simple single-quoted string 625'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 626
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 627
    type: "mixed"
    strings:
      double: "Double quoted 627"
      single: 'Single quoted 627'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 628
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 628"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 629
    type: 'single_quoted'
    simple: 'Simple single-quoted string 629'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 630
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 631
    type: "mixed"
    strings:
      double: "Double quoted 631"
      single: 'Single quoted 631'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 632
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 632"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 633
    type: 'single_quoted'
    simple: 'Simple single-quoted string 633'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 634
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 635
    type: "mixed"
    strings:
      double: "Double quoted 635"
      single: 'Single quoted 635'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 636
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 636"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 637
    type: 'single_quoted'
    simple: 'Simple single-quoted string 637'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 638
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 639
    type: "mixed"
    strings:
      double: "Double quoted 639"
      single: 'Single quoted 639'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 640
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 640"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 641
    type: 'single_quoted'
    simple: 'Simple single-quoted string 641'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 642
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 643
    type: "mixed"
    strings:
      double: "Double quoted 643"
      single: 'Single quoted 643'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 644
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 644"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 645
    type: 'single_quoted'
    simple: 'Simple single-quoted string 645'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 646
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 647
    type: "mixed"
    strings:
      double: "Double quoted 647"
      single: 'Single quoted 647'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 648
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 648"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 649
    type: 'single_quoted'
    simple: 'Simple single-quoted string 649'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 650
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 651
    type: "mixed"
    strings:
      double: "Double quoted 651"
      single: 'Single quoted 651'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 652
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 652"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 653
    type: 'single_quoted'
    simple: 'Simple single-quoted string 653'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 654
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 655
    type: "mixed"
    strings:
      double: "Double quoted 655"
      single: 'Single quoted 655'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 656
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 656"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 657
    type: 'single_quoted'
    simple: 'Simple single-quoted string 657'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 658
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 659
    type: "mixed"
    strings:
      double: "Double quoted 659"
      single: 'Single quoted 659'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 660
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 660"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 661
    type: 'single_quoted'
    simple: 'Simple single-quoted string 661'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 662
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 663
    type: "mixed"
    strings:
      double: "Double quoted 663"
      single: 'Single quoted 663'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 664
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 664"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 665
    type: 'single_quoted'
    simple: 'Simple single-quoted string 665'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 666
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 667
    type: "mixed"
    strings:
      double: "Double quoted 667"
      single: 'Single quoted 667'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 668
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 668"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 669
    type: 'single_quoted'
    simple: 'Simple single-quoted string 669'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 670
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 671
    type: "mixed"
    strings:
      double: "Double quoted 671"
      single: 'Single quoted 671'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 672
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 672"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 673
    type: 'single_quoted'
    simple: 'Simple single-quoted string 673'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 674
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 675
    type: "mixed"
    strings:
      double: "Double quoted 675"
      single: 'Single quoted 675'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 676
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 676"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 677
    type: 'single_quoted'
    simple: 'Simple single-quoted string 677'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 678
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 679
    type: "mixed"
    strings:
      double: "Double quoted 679"
      single: 'Single quoted 679'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 680
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 680"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 681
    type: 'single_quoted'
    simple: 'Simple single-quoted string 681'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 682
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 683
    type: "mixed"
    strings:
      double: "Double quoted 683"
      single: 'Single quoted 683'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 684
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 684"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 685
    type: 'single_quoted'
    simple: 'Simple single-quoted string 685'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 686
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 687
    type: "mixed"
    strings:
      double: "Double quoted 687"
      single: 'Single quoted 687'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 688
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 688"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 689
    type: 'single_quoted'
    simple: 'Simple single-quoted string 689'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 690
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 691
    type: "mixed"
    strings:
      double: "Double quoted 691"
      single: 'Single quoted 691'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 692
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 692"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 693
    type: 'single_quoted'
    simple: 'Simple single-quoted string 693'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 694
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 695
    type: "mixed"
    strings:
      double: "Double quoted 695"
      single: 'Single quoted 695'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 696
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 696"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 697
    type: 'single_quoted'
    simple: 'Simple single-quoted string 697'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 698
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 699
    type: "mixed"
    strings:
      double: "Double quoted 699"
      single: 'Single quoted 699'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 700
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 700"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 701
    type: 'single_quoted'
    simple: 'Simple single-quoted string 701'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 702
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 703
    type: "mixed"
    strings:
      double: "Double quoted 703"
      single: 'Single quoted 703'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 704
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 704"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 705
    type: 'single_quoted'
    simple: 'Simple single-quoted string 705'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 706
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 707
    type: "mixed"
    strings:
      double: "Double quoted 707"
      single: 'Single quoted 707'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 708
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 708"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 709
    type: 'single_quoted'
    simple: 'Simple single-quoted string 709'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 710
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 711
    type: "mixed"
    strings:
      double: "Double quoted 711"
      single: 'Single quoted 711'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 712
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 712"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 713
    type: 'single_quoted'
    simple: 'Simple single-quoted string 713'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 714
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 715
    type: "mixed"
    strings:
      double: "Double quoted 715"
      single: 'Single quoted 715'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 716
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 716"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 717
    type: 'single_quoted'
    simple: 'Simple single-quoted string 717'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 718
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 719
    type: "mixed"
    strings:
      double: "Double quoted 719"
      single: 'Single quoted 719'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 720
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 720"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 721
    type: 'single_quoted'
    simple: 'Simple single-quoted string 721'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 722
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 723
    type: "mixed"
    strings:
      double: "Double quoted 723"
      single: 'Single quoted 723'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 724
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 724"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 725
    type: 'single_quoted'
    simple: 'Simple single-quoted string 725'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 726
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 727
    type: "mixed"
    strings:
      double: "Double quoted 727"
      single: 'Single quoted 727'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 728
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 728"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 729
    type: 'single_quoted'
    simple: 'Simple single-quoted string 729'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 730
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 731
    type: "mixed"
    strings:
      double: "Double quoted 731"
      single: 'Single quoted 731'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 732
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 732"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 733
    type: 'single_quoted'
    simple: 'Simple single-quoted string 733'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 734
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 735
    type: "mixed"
    strings:
      double: "Double quoted 735"
      single: 'Single quoted 735'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 736
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 736"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 737
    type: 'single_quoted'
    simple: 'Simple single-quoted string 737'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 738
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 739
    type: "mixed"
    strings:
      double: "Double quoted 739"
      single: 'Single quoted 739'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 740
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 740"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 741
    type: 'single_quoted'
    simple: 'Simple single-quoted string 741'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 742
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 743
    type: "mixed"
    strings:
      double: "Double quoted 743"
      single: 'Single quoted 743'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 744
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 744"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 745
    type: 'single_quoted'
    simple: 'Simple single-quoted string 745'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 746
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 747
    type: "mixed"
    strings:
      double: "Double quoted 747"
      single: 'Single quoted 747'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 748
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 748"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 749
    type: 'single_quoted'
    simple: 'Simple single-quoted string 749'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 750
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 751
    type: "mixed"
    strings:
      double: "Double quoted 751"
      single: 'Single quoted 751'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 752
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 752"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 753
    type: 'single_quoted'
    simple: 'Simple single-quoted string 753'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 754
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 755
    type: "mixed"
    strings:
      double: "Double quoted 755"
      single: 'Single quoted 755'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 756
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 756"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 757
    type: 'single_quoted'
    simple: 'Simple single-quoted string 757'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 758
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 759
    type: "mixed"
    strings:
      double: "Double quoted 759"
      single: 'Single quoted 759'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 760
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 760"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 761
    type: 'single_quoted'
    simple: 'Simple single-quoted string 761'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 762
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 763
    type: "mixed"
    strings:
      double: "Double quoted 763"
      single: 'Single quoted 763'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 764
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 764"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 765
    type: 'single_quoted'
    simple: 'Simple single-quoted string 765'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 766
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 767
    type: "mixed"
    strings:
      double: "Double quoted 767"
      single: 'Single quoted 767'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 768
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 768"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 769
    type: 'single_quoted'
    simple: 'Simple single-quoted string 769'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 770
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 771
    type: "mixed"
    strings:
      double: "Double quoted 771"
      single: 'Single quoted 771'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 772
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 772"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 773
    type: 'single_quoted'
    simple: 'Simple single-quoted string 773'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 774
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 775
    type: "mixed"
    strings:
      double: "Double quoted 775"
      single: 'Single quoted 775'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 776
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 776"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 777
    type: 'single_quoted'
    simple: 'Simple single-quoted string 777'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 778
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 779
    type: "mixed"
    strings:
      double: "Double quoted 779"
      single: 'Single quoted 779'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 780
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 780"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 781
    type: 'single_quoted'
    simple: 'Simple single-quoted string 781'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 782
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 783
    type: "mixed"
    strings:
      double: "Double quoted 783"
      single: 'Single quoted 783'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 784
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 784"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 785
    type: 'single_quoted'
    simple: 'Simple single-quoted string 785'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 786
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 787
    type: "mixed"
    strings:
      double: "Double quoted 787"
      single: 'Single quoted 787'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 788
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 788"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 789
    type: 'single_quoted'
    simple: 'Simple single-quoted string 789'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 790
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 791
    type: "mixed"
    strings:
      double: "Double quoted 791"
      single: 'Single quoted 791'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 792
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 792"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 793
    type: 'single_quoted'
    simple: 'Simple single-quoted string 793'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 794
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 795
    type: "mixed"
    strings:
      double: "Double quoted 795"
      single: 'Single quoted 795'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 796
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 796"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 797
    type: 'single_quoted'
    simple: 'Simple single-quoted string 797'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 798
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 799
    type: "mixed"
    strings:
      double: "Double quoted 799"
      single: 'Single quoted 799'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 800
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 800"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 801
    type: 'single_quoted'
    simple: 'Simple single-quoted string 801'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 802
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 803
    type: "mixed"
    strings:
      double: "Double quoted 803"
      single: 'Single quoted 803'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 804
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 804"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 805
    type: 'single_quoted'
    simple: 'Simple single-quoted string 805'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 806
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 807
    type: "mixed"
    strings:
      double: "Double quoted 807"
      single: 'Single quoted 807'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 808
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 808"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 809
    type: 'single_quoted'
    simple: 'Simple single-quoted string 809'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 810
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 811
    type: "mixed"
    strings:
      double: "Double quoted 811"
      single: 'Single quoted 811'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 812
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 812"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 813
    type: 'single_quoted'
    simple: 'Simple single-quoted string 813'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 814
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 815
    type: "mixed"
    strings:
      double: "Double quoted 815"
      single: 'Single quoted 815'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 816
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 816"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 817
    type: 'single_quoted'
    simple: 'Simple single-quoted string 817'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 818
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 819
    type: "mixed"
    strings:
      double: "Double quoted 819"
      single: 'Single quoted 819'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 820
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 820"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 821
    type: 'single_quoted'
    simple: 'Simple single-quoted string 821'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 822
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 823
    type: "mixed"
    strings:
      double: "Double quoted 823"
      single: 'Single quoted 823'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 824
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 824"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 825
    type: 'single_quoted'
    simple: 'Simple single-quoted string 825'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 826
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 827
    type: "mixed"
    strings:
      double: "Double quoted 827"
      single: 'Single quoted 827'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 828
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 828"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 829
    type: 'single_quoted'
    simple: 'Simple single-quoted string 829'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 830
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 831
    type: "mixed"
    strings:
      double: "Double quoted 831"
      single: 'Single quoted 831'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 832
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 832"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 833
    type: 'single_quoted'
    simple: 'Simple single-quoted string 833'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 834
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 835
    type: "mixed"
    strings:
      double: "Double quoted 835"
      single: 'Single quoted 835'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 836
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 836"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 837
    type: 'single_quoted'
    simple: 'Simple single-quoted string 837'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 838
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 839
    type: "mixed"
    strings:
      double: "Double quoted 839"
      single: 'Single quoted 839'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 840
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 840"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 841
    type: 'single_quoted'
    simple: 'Simple single-quoted string 841'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 842
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 843
    type: "mixed"
    strings:
      double: "Double quoted 843"
      single: 'Single quoted 843'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 844
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 844"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 845
    type: 'single_quoted'
    simple: 'Simple single-quoted string 845'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 846
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 847
    type: "mixed"
    strings:
      double: "Double quoted 847"
      single: 'Single quoted 847'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 848
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 848"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 849
    type: 'single_quoted'
    simple: 'Simple single-quoted string 849'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 850
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 851
    type: "mixed"
    strings:
      double: "Double quoted 851"
      single: 'Single quoted 851'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 852
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 852"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 853
    type: 'single_quoted'
    simple: 'Simple single-quoted string 853'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 854
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 855
    type: "mixed"
    strings:
      double: "Double quoted 855"
      single: 'Single quoted 855'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 856
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 856"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 857
    type: 'single_quoted'
    simple: 'Simple single-quoted string 857'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 858
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 859
    type: "mixed"
    strings:
      double: "Double quoted 859"
      single: 'Single quoted 859'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 860
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 860"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 861
    type: 'single_quoted'
    simple: 'Simple single-quoted string 861'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 862
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 863
    type: "mixed"
    strings:
      double: "Double quoted 863"
      single: 'Single quoted 863'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 864
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 864"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 865
    type: 'single_quoted'
    simple: 'Simple single-quoted string 865'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 866
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 867
    type: "mixed"
    strings:
      double: "Double quoted 867"
      single: 'Single quoted 867'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 868
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 868"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 869
    type: 'single_quoted'
    simple: 'Simple single-quoted string 869'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 870
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 871
    type: "mixed"
    strings:
      double: "Double quoted 871"
      single: 'Single quoted 871'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 872
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 872"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 873
    type: 'single_quoted'
    simple: 'Simple single-quoted string 873'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 874
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 875
    type: "mixed"
    strings:
      double: "Double quoted 875"
      single: 'Single quoted 875'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 876
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 876"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 877
    type: 'single_quoted'
    simple: 'Simple single-quoted string 877'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 878
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 879
    type: "mixed"
    strings:
      double: "Double quoted 879"
      single: 'Single quoted 879'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 880
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 880"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 881
    type: 'single_quoted'
    simple: 'Simple single-quoted string 881'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 882
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 883
    type: "mixed"
    strings:
      double: "Double quoted 883"
      single: 'Single quoted 883'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 884
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 884"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 885
    type: 'single_quoted'
    simple: 'Simple single-quoted string 885'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 886
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 887
    type: "mixed"
    strings:
      double: "Double quoted 887"
      single: 'Single quoted 887'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 888
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 888"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 889
    type: 'single_quoted'
    simple: 'Simple single-quoted string 889'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 890
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 891
    type: "mixed"
    strings:
      double: "Double quoted 891"
      single: 'Single quoted 891'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 892
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 892"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 893
    type: 'single_quoted'
    simple: 'Simple single-quoted string 893'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 894
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 895
    type: "mixed"
    strings:
      double: "Double quoted 895"
      single: 'Single quoted 895'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 896
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 896"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 897
    type: 'single_quoted'
    simple: 'Simple single-quoted string 897'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 898
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 899
    type: "mixed"
    strings:
      double: "Double quoted 899"
      single: 'Single quoted 899'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 900
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 900"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 901
    type: 'single_quoted'
    simple: 'Simple single-quoted string 901'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 902
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 903
    type: "mixed"
    strings:
      double: "Double quoted 903"
      single: 'Single quoted 903'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 904
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 904"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 905
    type: 'single_quoted'
    simple: 'Simple single-quoted string 905'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 906
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 907
    type: "mixed"
    strings:
      double: "Double quoted 907"
      single: 'Single quoted 907'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 908
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 908"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 909
    type: 'single_quoted'
    simple: 'Simple single-quoted string 909'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 910
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 911
    type: "mixed"
    strings:
      double: "Double quoted 911"
      single: 'Single quoted 911'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 912
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 912"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 913
    type: 'single_quoted'
    simple: 'Simple single-quoted string 913'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 914
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 915
    type: "mixed"
    strings:
      double: "Double quoted 915"
      single: 'Single quoted 915'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 916
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 916"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 917
    type: 'single_quoted'
    simple: 'Simple single-quoted string 917'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 918
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 919
    type: "mixed"
    strings:
      double: "Double quoted 919"
      single: 'Single quoted 919'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 920
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 920"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 921
    type: 'single_quoted'
    simple: 'Simple single-quoted string 921'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 922
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 923
    type: "mixed"
    strings:
      double: "Double quoted 923"
      single: 'Single quoted 923'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 924
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 924"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 925
    type: 'single_quoted'
    simple: 'Simple single-quoted string 925'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 926
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 927
    type: "mixed"
    strings:
      double: "Double quoted 927"
      single: 'Single quoted 927'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 928
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 928"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 929
    type: 'single_quoted'
    simple: 'Simple single-quoted string 929'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 930
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 931
    type: "mixed"
    strings:
      double: "Double quoted 931"
      single: 'Single quoted 931'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 932
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 932"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 933
    type: 'single_quoted'
    simple: 'Simple single-quoted string 933'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 934
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 935
    type: "mixed"
    strings:
      double: "Double quoted 935"
      single: 'Single quoted 935'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 936
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 936"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 937
    type: 'single_quoted'
    simple: 'Simple single-quoted string 937'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 938
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 939
    type: "mixed"
    strings:
      double: "Double quoted 939"
      single: 'Single quoted 939'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 940
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 940"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 941
    type: 'single_quoted'
    simple: 'Simple single-quoted string 941'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 942
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 943
    type: "mixed"
    strings:
      double: "Double quoted 943"
      single: 'Single quoted 943'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 944
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 944"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 945
    type: 'single_quoted'
    simple: 'Simple single-quoted string 945'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 946
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 947
    type: "mixed"
    strings:
      double: "Double quoted 947"
      single: 'Single quoted 947'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 948
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 948"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 949
    type: 'single_quoted'
    simple: 'Simple single-quoted string 949'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 950
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 951
    type: "mixed"
    strings:
      double: "Double quoted 951"
      single: 'Single quoted 951'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 952
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 952"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 953
    type: 'single_quoted'
    simple: 'Simple single-quoted string 953'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 954
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 955
    type: "mixed"
    strings:
      double: "Double quoted 955"
      single: 'Single quoted 955'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 956
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 956"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 957
    type: 'single_quoted'
    simple: 'Simple single-quoted string 957'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 958
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 959
    type: "mixed"
    strings:
      double: "Double quoted 959"
      single: 'Single quoted 959'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 960
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 960"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 961
    type: 'single_quoted'
    simple: 'Simple single-quoted string 961'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 962
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 963
    type: "mixed"
    strings:
      double: "Double quoted 963"
      single: 'Single quoted 963'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 964
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 964"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 965
    type: 'single_quoted'
    simple: 'Simple single-quoted string 965'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 966
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 967
    type: "mixed"
    strings:
      double: "Double quoted 967"
      single: 'Single quoted 967'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 968
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 968"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 969
    type: 'single_quoted'
    simple: 'Simple single-quoted string 969'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 970
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 971
    type: "mixed"
    strings:
      double: "Double quoted 971"
      single: 'Single quoted 971'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 972
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 972"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 973
    type: 'single_quoted'
    simple: 'Simple single-quoted string 973'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 974
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 975
    type: "mixed"
    strings:
      double: "Double quoted 975"
      single: 'Single quoted 975'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 976
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 976"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 977
    type: 'single_quoted'
    simple: 'Simple single-quoted string 977'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 978
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 979
    type: "mixed"
    strings:
      double: "Double quoted 979"
      single: 'Single quoted 979'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 980
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 980"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 981
    type: 'single_quoted'
    simple: 'Simple single-quoted string 981'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 982
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 983
    type: "mixed"
    strings:
      double: "Double quoted 983"
      single: 'Single quoted 983'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 984
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 984"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 985
    type: 'single_quoted'
    simple: 'Simple single-quoted string 985'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 986
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 987
    type: "mixed"
    strings:
      double: "Double quoted 987"
      single: 'Single quoted 987'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 988
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 988"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 989
    type: 'single_quoted'
    simple: 'Simple single-quoted string 989'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 990
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 991
    type: "mixed"
    strings:
      double: "Double quoted 991"
      single: 'Single quoted 991'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 992
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 992"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 993
    type: 'single_quoted'
    simple: 'Simple single-quoted string 993'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 994
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 995
    type: "mixed"
    strings:
      double: "Double quoted 995"
      single: 'Single quoted 995'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

  - id: 996
    type: "double_quoted_escapes"
    simple: "Simple double-quoted string 996"
    with_escapes: "Line 1\nLine 2\tTabbed\nLine 3"
    with_quotes: "She said \"Hello\" to me"
    with_backslash: "Path: C:\\Users\\test\\file.txt"
    with_unicode: "Unicode: \u00E9\u00E0\u00F6"
    multiline: "This is a very long string that would normally span multiple lines in the source but is kept as a single line with proper escaping and continuation"

  - id: 997
    type: 'single_quoted'
    simple: 'Simple single-quoted string 997'
    with_quotes: 'It''s a beautiful day'
    literal_backslash: 'C:\Users\test\file.txt'
    no_escapes: 'Backslash \n is literal, not newline'
    apostrophes: 'Don''t worry, be happy'
    nested: 'She said ''Hello'' to me'

  - id: 998
    type: "double_quoted_complex"
    url: "https://example.com/path?query=value&other=value"
    json_like: "{\"key\": \"value\", \"number\": 123}"
    xml_like: "<tag attribute=\"value\">Content</tag>"
    regex: "\\d+\\.\\d+\\.\\d+\\.\\d+"
    special_chars: "!@#$%^&*()_+-=[]{}|;':\",./<>?"

  - id: 999
    type: "mixed"
    strings:
      double: "Double quoted 999"
      single: 'Single quoted 999'
    nested:
      level1: "Level 1 string"
      level2:
        deep: "Deeply nested string"
        escaped: "With\nescapes\tand\ttabs"

# Edge cases for string parsing
edge_cases:
  empty_double: ""
  empty_single: ''
  only_escapes: "\n\t\r"
  long_string: "This is an extremely long string that contains a lot of text to test the performance of string parsing when dealing with longer content that might stress the string builder implementation and memory allocation patterns in the lexer"
  unicode_heavy: "\u0041\u0042\u0043\u0044\u0045\u0046\u0047\u0048\u0049\u004A"
  many_escapes: "Line1\nLine2\nLine3\nLine4\nLine5\nLine6\nLine7\nLine8\nLine9\nLine10"

# Performance test cases
performance_strings:
  - "String with ID 0 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 1 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 2 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 3 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 4 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 5 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 6 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 7 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 8 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 9 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 10 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 11 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 12 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 13 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 14 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 15 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 16 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 17 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 18 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 19 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 20 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 21 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 22 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 23 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 24 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 25 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 26 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 27 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 28 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 29 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 30 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 31 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 32 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 33 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 34 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 35 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 36 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 37 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 38 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 39 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 40 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 41 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 42 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 43 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 44 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 45 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 46 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 47 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 48 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 49 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 50 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 51 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 52 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 53 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 54 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 55 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 56 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 57 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 58 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 59 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 60 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 61 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 62 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 63 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 64 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 65 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 66 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 67 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 68 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 69 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 70 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 71 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 72 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 73 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 74 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 75 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 76 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 77 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 78 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 79 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 80 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 81 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 82 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 83 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 84 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 85 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 86 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 87 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 88 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 89 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 90 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 91 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 92 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 93 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 94 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 95 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 96 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 97 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 98 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
  - "String with ID 99 and escape sequences\nNewline\tTab\rCarriage\\ Backslash \" Quote"
